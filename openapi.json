{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.1",
    "title": "Pay Global",
    "termsOfService": "https://payglobal.me/terms.html",
    "contact": {
      "name": "Pay Global",
      "url": "https://payglobal.me/contact.html"
    },
    "x-logo": {
      "url": "http://docs.api.payglobal.me/img/logo.png"
    },
    "description": "# Overview\nThese APIs are exposed by the Pay Global for the business users who want to access the platform features programatically from there own **Server Applications**. Please note that these APIs are meant to be called from server side of the client application. To access these APIs you are required to be registered to the Pay Global Platform and must apply for the Business Account. Once your business account is verified, you will be able to access these APIs. You will require to generate a `ClientID` and `ClientSecret` from your account profile page.\n\n# Security\nEvery approved business account will be able to access these APIs with the generated `ClientID` and `ClientSecret`.\n## How to get the ClientID and ClientSecret?\nFrom within your account, once your account is approved for the business account in the payglobal platform, you will be able to see the Get Client Access Key. There you will be able to generate the `ClientID` and `ClientSecret`. Once generated, `ClientID` will remain same, but in case the `ClientSecret` has been compromise you can request for a new one. These keys are used to generate the `client_token` at the client side.\n"
  },
  "tags": [
    {
      "name": "Client App Authorization",
      "description": "This operations are performed by the **client application** to obtain an `access_token` in exchange of the `client_token`.\n"
    },
    {
      "name": "Resources",
      "description": "Resources like available / allowed countries / courrencies.\n"
    },
    {
      "name": "User",
      "description": "The endpoints here are used to create a new user (member / individual) account in the platform. The users created by the business, will receive an email containing a link to complete the registration process on the pltatform. \n"
    }
  ],
  "servers": [
    {
      "url": "http://sandbox.api.payglobal.me/business/api",
      "description": "This is the test environment for the sake of the integration testing."
    },
    {
      "url": "http://api.payglobal.me/business/api",
      "description": "This is the production environment for the real transactional calls to the environment."
    }
  ],
  "paths": {
    "/auth/token": {
      "get": {
        "tags": [
          "Client App Authorization"
        ],
        "summary": "Get Access Token",
        "description": "The client application is required to generate a `client_token` in the JWT format and pass as the bearer token to the request. Please read more about the `client_token` in the description of the api above.",
        "operationId": "auth/token",
        "security": [
          {
            "client_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenErrorResponseBadRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/auth/token/renew": {
      "get": {
        "tags": [
          "Client App Authorization"
        ],
        "summary": "Renew Access Token",
        "description": "The client application can renew it's expiring `access_token` (before it is expired). Please read more about the `access_token` in the description of the api above.",
        "operationId": "auth/token/renew",
        "security": [
          {
            "access_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenErrorResponseBadRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/user/create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create User",
        "description": "This api is called to create a new user in the platform. Once the user is created in the system, an email containing a link to complete the registration will be sent to the user. The user will not be able to receive the funds or login unless the user has completed the registration process.",
        "operationId": "user/create",
        "security": [
          {
            "access_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserErrorResponseBadRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseUnauthorized"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseForbidden"
            }
          }
        }
      },
      "ServerError": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseServerError"
            }
          }
        }
      }
    },
    "schemas": {
      "ValidationErrorObject": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Location": {
            "type": "string"
          },
          "Field": {
            "type": "string"
          },
          "Error": {
            "type": "string"
          }
        },
        "example": [
          {
            "Location": "body",
            "Field": "Request Field Name",
            "Error": "Required Field Missing"
          },
          {
            "Location": "path",
            "Field": "URL Parameter Name",
            "Error": "Invalid Data Format"
          }
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "number",
            "example": 200
          },
          "ResponseMessage": {
            "type": "string",
            "example": "Success"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ResponseCode": {
            "type": "number",
            "example": 200
          },
          "ResponseMessage": {
            "type": "string",
            "example": "Success"
          }
        }
      },
      "ErrorResponseBadRequest": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "example": {
              "ResponseCode": 400,
              "ResponseMessage": "BadRequest"
            }
          }
        ]
      },
      "ErrorResponseUnauthorized": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "example": {
              "ResponseCode": 401,
              "ResponseMessage": "Unauthorized"
            }
          }
        ]
      },
      "ErrorResponseForbidden": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "example": {
              "ResponseCode": 403,
              "ResponseMessage": "Forbidden"
            }
          }
        ]
      },
      "ErrorResponseServerError": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "example": {
              "ResponseCode": 500,
              "ResponseMessage": "ServerError"
            }
          }
        ]
      },
      "CreateUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "FirstName",
          "LastName",
          "MobileCountryCode",
          "MobileNumber",
          "CountryCode",
          "EmailAddress"
        ],
        "properties": {
          "FirstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "John"
          },
          "LastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "Doe"
          },
          "MobileCountryCode": {
            "type": "string",
            "pattern": "^\\+[0-9]{1,3}",
            "example": "+1"
          },
          "MobileNumber": {
            "type": "string",
            "pattern": "^[0-9]{6,14}",
            "example": "9989767886"
          },
          "CountryCode": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "pattern": "^[A-Z]{2}",
            "description": "a 2 letter iso code for the country",
            "example": "US"
          },
          "EmailAddress": {
            "type": "string",
            "minLength": 8,
            "maxLength": 75,
            "example": "john.doe@example.com"
          }
        }
      },
      "CreateUserSuccessResponse": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "ResponseData": {
                "type": "object",
                "properties": {
                  "UserID": {
                    "type": "string",
                    "example": "886788245512544"
                  }
                }
              }
            }
          }
        ]
      },
      "CreateUserErrorResponseBadRequest": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseBadRequest"
          },
          {
            "type": "object",
            "properties": {
              "ResponseError": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidationErrorObject"
                }
              }
            }
          }
        ]
      },
      "TokenSuccessResponse": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "ResponseData": {
                "type": "object",
                "properties": {
                  "Token": {
                    "type": "string",
                    "format": "JWT",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiY2xpZW50SUQiOiJiNjNhYzdlYS05MjFkLWMzMzQtMDU3MS04MmRkNDk5ZTg1ZmEiLCJpYXQiOjE1MTYyMzkwMjJ9.2URq7K4IWcOURcgJmeXE8-eAoltt1_xDNMWX_2TAnI0"
                  }
                }
              }
            }
          }
        ]
      },
      "TokenErrorResponseBadRequest": {
        "additionalProperties": false,
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseBadRequest"
          },
          {
            "type": "object",
            "properties": {
              "ResponseError": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidationErrorObject"
                }
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "client_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "This is a **JWT** token generated by the client, where server will be able to issue an `access_token` in replace of it. This token must contain a ClientID as a payload property. Client application can include other information in the payload, which in turn will be returned with the `access_tokekn` issues by the server. This token is required to passed as a bearer token in the `authorization` header.\n"
      },
      "access_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "This is a **JWT** token issued by the api server in response to the `Get Access Token` or `Renew Access Token` api calls. `access_token` is required to be passed in every api calls made to server except `Get Access Token`. This token authorizes the client application to access the server resources available to be consumed by the client and accessible by the granted permisions and configurations. An `access_token` will have the default expiry and will contain the additional payload properies provided by the client during the request for the token.\n"
      }
    }
  }
}
